(in-package :cl-user)
(defpackage trivial-ws-test
  (:use :cl :prove))
(in-package :trivial-ws-test)

(plan nil)

(let* ((connectedp nil)
       (disconnectedp nil)
       (server-received nil)
       (client-received nil)
       (server (trivial-ws:make-server
                :on-connect #'(lambda (server)
                                (declare (ignore server))
                                (setf connectedp t))
                :on-disconnect #'(lambda (server)
                                   (declare (ignore server))
                                   (setf disconnectedp t))
                :on-message #'(lambda (server message)
                                (setf server-received t)
                                (trivial-ws:send (first (trivial-ws:clients server))
                                                 message))))
       (handler)
       (address "127.0.0.1")
       (port (find-port:find-port)))
  (ok (setf handler (trivial-ws:start server port :address address)) "Start server")
  (let ((client))
    (ok (setf client (trivial-ws.client:make-client
                      (format nil "ws://~A:~D/" address port)
                      :on-message #'(lambda (client message)
                                      (declare (ignore client message))
                                      (setf client-received t))))
        "Make client instance")
    (sleep 1)
    (trivial-ws.client:with-client-connection (client)
      (pass "Client connected")
      (sleep 1)
      (ok (trivial-ws.client:send client "ping" :callback (lambda () t)) "Send message")))
  (ok (trivial-ws:stop handler) "Stop server")
  (sleep 1)
  (ok connectedp "Connected")
  (ok server-received "Server received message")
  (ok client-received "Client received message")
  (ok disconnectedp "Disconnected"))

(finalize)
